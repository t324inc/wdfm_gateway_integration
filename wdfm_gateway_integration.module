  <?php

/**
 * @file
 * Contains wdfm_gateway_integration.module.
 */

  use Drupal\block\Entity\Block;
  use Drupal\Core\Access\AccessResult;
  use Drupal\Core\Routing\RouteMatchInterface;
  use Drupal\Core\Session\AccountInterface;
  use Drupal\wdfm_gateway_integration\Entity\MembershipEntity;

  /**
 * Implements hook_help().
 */
function wdfm_gateway_integration_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the wdfm_gateway_integration module.
    case 'help.page.wdfm_gateway_integration':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Integration with the Gateway server using SOAP style XML transactions over HTTP') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function wdfm_gateway_integration_entity_type_alter(array &$entity_types) {
  $entity_types['user']->setFormClass('register', '\Drupal\wdfm_gateway_integration\Form\WDFMGatewayRegisterForm');
}

/**
 * Implements hook_user_delete().
 */
function wdfm_gateway_integration_user_delete(Drupal\Core\Entity\EntityInterface $entity) {
  $membership_ids = \Drupal::entityQuery('membership')
    ->condition('uid', $entity->id())
    ->execute();
  if(!empty($membership_ids)) {
    $memberships = MembershipEntity::loadMultiple($membership_ids);
    foreach($memberships as $item) {
      /** @var \Drupal\wdfm_gateway_integration\Entity\MembershipEntity $membership **/
      $membership = $item;
      $membership->delete();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function wdfm_gateway_integration_membership_delete(Drupal\Core\Entity\EntityInterface $entity) {
  if(!empty($entity->get('uid')->target_id)) {
    $uid = $entity->get('uid')->target_id;
    /** @var \Drupal\user\Entity\User $user */
    $user = \Drupal\user\Entity\User::load($uid);
    if(!empty($user)) {
      $membership_ids = \Drupal::entityQuery('membership')
        ->condition('uid', $user->id())
        ->condition('id', $entity->id(), '!=')
        ->execute();
      if(empty($membership_ids)) {
        $user->removeRole('wdfm_member');
        $user->save();
      }
    }
  }
}

/**
 * Implements hook_block_access().
 */
function wdfm_gateway_integration_block_access(Block $block, $operation, AccountInterface $account) {

  if($block->id() == "attachyourmembershipfordiscounts") {
    $roles = $account->getRoles();
    if(in_array('authenticated', $roles) && !in_array('wdfm_member', $roles)) {
      return AccessResult::allowed();
    }
    return AccessResult::forbidden();
  }

  return AccessResult::neutral();
}
